###Load packages
library(ggplot2)
library(ggpubr)
library(reshape2)
library(forcats)
library(tidyverse)
library(ggResidpanel)
library (car)
file <- file.choose(new = FALSE)#MultivariateGROWTH_PLFA.csv
data <- read.csv(file,header=T,dec=".",sep=",", row.names=1)
data$Treatment <- gsub(' - Rewet', '', data$Treatment)
data$Treatment <- gsub('Future', 'Future Climate', data$Treatment)
#restructure data set
z<-data[,3:20]
colnames(z) <- c("gram.pos","gram.pos",  "gram.pos",	"gram.neg", "amf",	"general",		"actino", "gram.pos",	"gram.pos",	"gram.neg",	"actino",	 "fungi",	"fungi",	"general",	"general",	"general","actino",	"gram.neg")
data_group<- as.data.frame(t(rowsum(t(z), colnames(z))))
data_group$fbratio<-data_group$fungi/(data_group$gram.pos+data_group$gram.neg+data_group$actino)
data_group$gram.pos<-data_group$gram.pos+data_group$actino
data_group$Treatment<-data$Treatment
data_group$Time<-data$Time
#run statistic for each group
library(nlme)
#column<-sub(" rewet.*", "", data_ind[,7])
data_stat<-data_group
#data_stat$Treatment2<-column
drought <- c("Drought","Future Climate + Drought")
notdrought<- c("Ambient","Future Climate")
future <- c("Future Climate","Future Climate + Drought")
ambient <- c("Ambient","Drought")
#rewet <- c("Rewet")
data_stat$varia<-row.names(data_stat)
rewet<-c("aD1.rL","aD2.rL","aD3.rL","aD4.rL","aFD1.rL","aFD2.rL","aFD3.rL","aFD4.rL")
notrewet<-c("a1L","a2L","a3L","a4L","aF1L","aF2L","aF3L","aF4L")
fut<-c("aF1L","aF2L","aF3L","aF4L","aFD1.rL","aFD2.rL","aFD3.rL","aFD4.rL")
notfut<-c("aD1.rL","aD2.rL","aD3.rL","aD4.rL","a1L","a2L","a3L","a4L")
data_stat$plot<-c("a1","a2","a3","a4","aD1","aD2","aD3","aD4","aF1","aF2","aF3","aF4","aFD1","aFD2","aFD3","aFD4","aD1","aD2","aD3","aD4","aFD1","aFD2","aFD3","aFD4","a1","a2","a3","a4","aD1","aD2","aD3","aD4","aF1","aF2","aF3","aF4","aFD1","aFD2","aFD3","aFD4")
#data_stat$Drought <- ifelse(data_stat$Treatment %in% drought, "drought", "no")
data_stat$Drought[data_stat$Treatment %in% drought] <- 'drought'
data_stat$Drought[data_stat$Treatment %in% notdrought] <- 'not'
data_stat$Future[data_stat$Treatment %in% future] <- 'future'
data_stat$Future[data_stat$Treatment %in% ambient] <- 'ambient'
data_stat$Rewet[data_stat$varia %in% rewet] <- 'rewet'
data_stat$Rewet[data_stat$varia %in% notrewet] <- 'not'
data_stat$Fut2[data_stat$varia %in% fut] <- 'fut'
data_stat$Fut2[data_stat$varia %in% notfut] <- 'amb'
# names of groups
group.names <- colnames(data_stat)[1:7]
no.groups <- length(group.names)
# create a named list to hold the fitted models
fitlist <- as.list(1:no.groups)
names(fitlist) <- group.names
anovalist<- as.list(1:no.groups)
names(anovalist) <- group.names
shapirolist<- as.list(1:no.groups)
names(shapirolist) <- group.names
levenelist<- as.list(1:no.groups)
names(levenelist) <- group.names
#plot the correlation plots
#load the file with respiration data: Respiration comparison.csv
file <- file.choose(new = FALSE)
resp.data <- read.csv(file,header=T,dec=".",sep=",", row.names=1)
data_group$resp<-resp.data$Resp_label
#test lme for all group together explaining respiration
data_group$
#FB ratio during recovery
m3<-lme(resp~gram.pos + gram.neg + actino + fungi + fbratio,random=~1|plot, data=subset(data_stat, Time=="Drought"))
#FB ratio during recovery
m3<-lme(resp~gram.pos + gram.neg + actino + fungi + fbratio,random=~1|plot, data=data_group)
data_group
View(resp.data)
#test lme for all group together explaining respiration
data_group$plot<-data_stat$plot
#FB ratio during recovery
m3<-lme(resp~gram.pos + gram.neg + actino + fungi + fbratio,random=~1|plot, data=data_group)
summary(m3)
anova(m3)
summary(m3)
anova(m3)
plot(m3,resid(.,scaled=TRUE)~fitted(.),abline=0)
plot(ranef(m3))
qqnorm(m3)
shapiro.test(resid(m3))
leveneTest(resid(m3)~Drought*Future,data=subset(data_stat, Time=="Drought"))
anova(m3)
#FB ratio during recovery
m3<-lme(resp~ gram.neg + actino +gram.pos +fungi + fbratio,random=~1|plot, data=data_group)
summary(m3)
anova(m3)
#FB ratio during recovery
m3<-lme(resp~ actino+gram.neg  +gram.pos +fungi + fbratio,random=~1|plot, data=data_group)
summary(m3)
anova(m3)
VIF(m3)
vif.lme(m3)
#function vif.lme
## The function is currently defined as
vif.lme<-function (mod)
{
if (any(is.na(fixef(mod))))
stop("there are aliased coefficients in the model")
v <- vcov(mod)
mm <- model.matrix(formula(mod), mod$data)
assign <- attributes(mm)$assign
if (names(fixef(mod)[1]) == "(Intercept)") {
v <- v[-1, -1]
assign <- assign[-1]
}
else warning("No intercept: vifs may not be sensible.")
terms <- labels(terms(mod))
n.terms <- length(terms)
if (n.terms < 2)
stop("model contains fewer than 2 terms")
R <- cov2cor(v)
detR <- det(R)
result <- matrix(0, n.terms, 3)
rownames(result) <- terms
colnames(result) <- c("GVIF", "Df", "GVIF^(1/2Df)")
for (term in 1:n.terms) {
subs <- which(assign == term)
result[term, 1] <- det(as.matrix(R[subs, subs])) * det(as.matrix(R[-subs,
-subs]))/detR
result[term, 2] <- length(subs)
}
if (all(result[, 2] == 1))
result <- result[, 1]
else result[, 3] <- result[, 1]^(1/(2 * result[, 2]))
result
}
vif.lme(m3)
